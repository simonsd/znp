#!/usr/bin/env bash
# Runs a command wrapped in ZFS pre-post snapshots. The whole data pool is recursively snapshotted.
# Analogous to my snp script for BTRFS: https://gist.github.com/erikw/5229436
# Usage: $ znp <commands>
# e.g.: $ znp pgk upgrade
# e.g.: $ znp portmaster -aG
# e.g.: $ znp freebsd-upgrade install

zfs_pool=zroot

cmd="$@"
log_path="/var/log/znp"
date=$(date "+%Y-%m-%d-%H%M%S")
snapshot_prefix="znp_${date}"
log_file="${log_path}/znp_${date}.log"
snap_label=$(echo "$cmd"|cut -c-30)

znp_snapshot(){
  snap_type="${1:-pre}"

  case "$snap_type" in
    'pre'|'post') true ;;
    *)            echo "[ERROR] Invalid snapshot type \"$snap_type\" requested, please use pre|post"; exit 1 ;;
  esac

  snapshot_name="${zfs_pool}@${snapshot_prefix}_${snap_type}"
  zfs snapshot -r -o znp:command="$snap_label" "$snapshot_name"
  echo "# New ${snap_type} snapshot created: ${snapshot_name}"
  echo ""
}

! [ -d $log_path ] && mkdir -p $log_path
echo "# Logging to: ${log_file}"
echo ""
# Log stdout and stderr. Reference: http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
exec >  >(tee -a "$log_file")
exec 2> >(tee -a "$log_file" >&2)

znp_snapshot pre

echo "# Running command \"${cmd}\""
echo "####### BEGIN COMMAND OUTPUT #######"
eval "$cmd"
ecode="$?"
echo "####### END COMMAND OUTPUT #######"
echo "# Command return code: ${ecode}"
echo ""

znp_snapshot post
